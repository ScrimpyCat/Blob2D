(gui "gui-textfield"
    (state! ".colour" (110 120 255) (invalidate: (quote (frame-changed?))))
    (state! ".radius" (quote (/ 8.0 (max .width .height))) (invalidate: (quote (frame-changed?))))
    (state! ".outline" 0 (invalidate: (quote (frame-changed?))))
    (state! ".outline-colour" (quote (darken .colour 5)) (invalidate: (quote (frame-changed?))))

    (state! ".align" :left)
    (state! ".wrap" :word)
    (state! ".lines" :multi)
    (state! ".length" :max)
    (state! ".string" "example")
    (state! ".formatter" (quote (text: .string)))

    (state! ".cursor" (length .string))
    (state! ".cursor-colour" (255 110 120) (invalidate: (quote (frame-changed?))))

    (children:
        (gui-rect
            (.colour! (quote (super .colour)))
            (.radius! (quote (super .radius)))
            (.outline! (quote (super .outline)))
            (.outline-colour! (quote (super .outline-colour)))
        )
        (gui-text
            (.string! (quote (super .formatter)))
            (.align! (quote (super .align)))
            (.wrap! (quote (super .wrap)))
            (.lines! (quote (super .lines)))
            (.length! (quote (super .length)))

            (render:
                (if .active
                    (render-rect (strict-super (flatten (text-cursor-position .text (super .cursor)) 2 10)) .cursor-colour) ;todo: Think of nicer approach to the super problem see issue #1 https://github.com/ScrimpyCat/Blob-Game/issues/1
                )
            )
        )
    )

    (state! ".active" #f)
    (state! ".inside" #f)
    (state! ".dragged" #f)

    (control:
        (on (click: :left .rect)
            (if @press
                ((.active! #f) (.inside! #t) (.dragged! #t))
                ((if .inside (.active! #t)) (.inside! #f) (.dragged! #f))
            )
            ((.active! #f) (.inside! #f) (.dragged! @press))
        )
        (if .active
            (begin
                (on (key: :grapheme) ((.string! (insert @char .string .cursor)) (.cursor! (+ .cursor 1)))
                (on (key: :direction)
                    (
                        (if (= @keycode 263) (.cursor! (max (- .cursor 1) 0)))
                        (if (= @keycode 262) (.cursor! (min (+ .cursor 1) (length .string))))
                    )
                )
            )
        )
    )
)
